scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    # ! this indicates that is compulsory (required)
    #    user(id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    #        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])): User @find
    #    user: User @find # givers error as it return all and need id
    #    user(id: ID): User @find # still gives error because it doesn't which field i have to compare si it means where clause is missing
    user(id: ID @eq): User @find  #if there is no value on this id then might we get null values
    # @find is a resolver


    #    users(name: String @where(operator: "like")): [User!]! @paginate(defaultCount: 10)
    #    users: User @all  # it returns collection of objects, collection include array of objects
    #    users: [User] @all  #Giving me array of users all
    #    users: [User!] @all  #Giving me array of users only which values are not null
    #    users: [User!]! @all  #Giving me array of users only which values are not null and giving confidence we are getting array
    users: [User!]! @paginate



}

type Mutation {
    createUser(name: String!, email: String! @rules(apply: ["email","unique:users"]), password: String! @rules(apply: ["string", "min:7"])) : User! @create   #@create is a resolver given by light house package.
    updateUser(id: ID!, name: String!) : User! @update    #@create is a resolver given by light house package.
    deleteUser(id: ID!) : User @delete   # ! this indicates that is compulsory (required)
    upsertUser(id: ID!, name: String!, email: String!, password: String!) : User! @upsert # it is update and create, checks if exist then only update otherwise create it
    uploadAvatar(image: Upload!, id: ID!) : User

}

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post]! @hasMany #these are relations between user and post
    avatar: String
}
